function temporalSaliencyMap = runSpatioTempSaliency

beginTic = tic;

%% input
if ~exist('input', 'var')
    input.numFrames = 3;
    obj = VideoReader('D:\Logan\Documents\MATLAB\MastersProject\Videos\crane_destroying_building.mp4');
    largeVid = read(obj, [1 input.numFrames]);
    input.vid = uint8(Helper.ResizeVideo(largeVid, 0.5)); % make it slightly more manageable
    input.vidSz = size(input.vid);
end


%% load pre-trained edge detection model and set opts (see edgesDemo.m)
if ~exist('model','var')
    model=load('models/forest/modelBsds');
    model=model.model;
    model.opts.nms=-1;
    model.opts.nThreads=4;
    model.opts.multiscale=0;
    model.opts.sharpen=2;
end

%% set up opts for spDetect (see spDetect.m)
if ~exist('opts','var')
    opts = spDetect;
    opts.nThreads = 2;  % number of computation threads
    opts.k = 2048; %input.vidSz(1) * input.vidSz(2) / 200; % controls scale of superpixels (big k -> big sp)
    %TODO: tweak k
    opts.alpha = .5;    % relative importance of regularity versus data terms
    opts.beta = .9;     % relative importance of edge versus color terms
    opts.merge = 0;     % set to small value to merge nearby superpixels at end
    %opts.bounds = 0;
end

disp([datestr(datenum(0,0,0,0,0,toc(beginTic)),'HH:MM:SS.FFF') ' <- Input + Model Gen']);

%% compute saliency
framePrev = [];
temporalSaliencyMap = zeros(input.vidSz(1), input.vidSz(2), input.numFrames);
for t = 1:input.numFrames
    tic
    [frameNow, temporalSaliencyMap(:,:,t)] = populateFrame(input.vid(:,:,:,t), framePrev, model, opts, t);
    
    
    
    framePrev = frameNow;
    disp([datestr(datenum(0,0,0,0,0,toc),'HH:MM:SS.FFF') ' <- Frame ' num2str(t)]);
end

%TODO: Super unsafe, but is debug code so that makes it ok.
temporalSaliencyMap = temporalSaliencyMap(:,:,2:end);

disp([datestr(datenum(0,0,0,0,0,toc(beginTic)),'HH:MM:SS.FFF') ' <- Total']);